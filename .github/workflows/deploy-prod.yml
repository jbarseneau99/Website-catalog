name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SPRING_PROFILES_ACTIVE: production
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Build UI
        working-directory: ui
        run: |
          npm install
          npm run build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.prod.yml build
          docker-compose -f docker-compose.prod.yml push

      - name: Deploy to Production
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/namespace.yml
          kubectl apply -f kubernetes/configmap.yml
          kubectl apply -f kubernetes/secret.yml
          kubectl apply -f kubernetes/services/
          kubectl apply -f kubernetes/deployments/
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/eureka -n website-catalog
          kubectl rollout status deployment/port-manager -n website-catalog
          kubectl rollout status deployment/url-validation -n website-catalog
          kubectl rollout status deployment/ui -n website-catalog

      - name: Verify Deployment
        run: |
          kubectl get pods -n website-catalog
          kubectl get services -n website-catalog

      - name: Cleanup
        if: always()
        run: rm -f kubeconfig.yaml 