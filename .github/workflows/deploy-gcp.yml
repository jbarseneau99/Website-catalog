name: Deploy to Google Cloud Platform (Production)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: mach33-cluster
  GKE_ZONE: us-central1-a

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SPRING_PROFILES_ACTIVE: prod
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: false  # Explicitly disable submodule checkout
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: |
        # Check if Maven is installed
        if ! command -v mvn &> /dev/null; then
          echo "Maven not found, installing..."
          sudo apt-get update
          sudo apt-get install -y maven
        fi
        
        # Print working directory and list files
        echo "Current directory: $(pwd)"
        ls -la
        
        # Create a simple pom.xml file
        echo "Creating root pom.xml..."
        echo '<?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.mach33</groupId>
          <artifactId>website-catalog-parent</artifactId>
          <version>1.0.0</version>
          <packaging>pom</packaging>
          <name>Website Catalog Parent</name>
          <description>Parent POM for Website Catalog Application</description>
        </project>' > pom.xml
        
        # Set environment variables for production
        export SPRING_PROFILES_ACTIVE=prod
        export MONGODB_URI=$MONGODB_URI
        
        # Build each service individually
        cd Mach33-Microservices-Platform
        
        # Build common service parent
        echo "Building common service parent..."
        cd common/service-parent && mvn clean install -DskipTests && cd ../..
        
        # Build infrastructure services
        echo "Building infrastructure services..."
        cd infrastructure/service-discovery && mvn clean package -DskipTests && cd ../..
        cd infrastructure/api-gateway && mvn clean package -DskipTests && cd ../..
        
        # Build microservices
        echo "Building microservices..."
        for service in services/port-manager services/url-validation services/nlp-service services/catalog-processor services/llm-connection services/google-search; do
          if [ -d "$service" ]; then
            echo "Building $service..."
            cd $service && mvn clean package -DskipTests && cd $(echo $service | sed 's/[^\/]*$//' | sed 's/[^\/]*\//..\//g')
          else
            echo "Warning: $service not found, skipping"
          fi
        done
        
        echo "âœ… Maven build completed"
    
    # Setup gcloud CLI
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    # Print diagnostic information
    - name: Print GCP Diagnostics
      run: |
        echo "Checking GCP configuration..."
        echo "PROJECT_ID env var: $PROJECT_ID"
        echo "GCP_PROJECT_ID secret available: ${{ secrets.GCP_PROJECT_ID != '' }}"
        echo "GCP_SA_KEY secret available: ${{ secrets.GCP_SA_KEY != '' }}"
        echo "Current project from gcloud:"
        gcloud config get-value project
        echo "Current account from gcloud:"
        gcloud config get-value account
        echo "Available GKE clusters:"
        gcloud container clusters list || echo "Failed to list clusters, but continuing"
    
    # Configure Docker to use Google Cloud
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io
    
    # Install Docker Compose (just in case it's needed)
    - name: Install Docker Compose
      run: |
        echo "Installing Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name: Verify Docker Installation
      run: |
        echo "Verifying Docker installation..."
        docker --version
        docker info
        docker ps
        echo "Docker is working properly"
    
    # Build and push Docker images to Google Container Registry
    - name: Build and push Docker images
      run: |
        # Loop through each service and build/push images
        for service in infrastructure/service-discovery infrastructure/api-gateway services/port-manager services/url-validation services/nlp-service services/catalog-processor services/llm-connection services/google-search; do
          service_name=$(basename $service)
          echo "Building and pushing $service_name..."
          
          # Check if service directory exists
          if [ ! -d "./Mach33-Microservices-Platform/$service" ]; then
            echo "Warning: Service directory ./Mach33-Microservices-Platform/$service not found, skipping"
            continue
          fi
          
          # Build the image
          docker build -t "gcr.io/$PROJECT_ID/$service_name:$GITHUB_SHA" ./Mach33-Microservices-Platform/$service
          
          # Push the image
          docker push "gcr.io/$PROJECT_ID/$service_name:$GITHUB_SHA"
          
          # Tag as latest
          docker tag "gcr.io/$PROJECT_ID/$service_name:$GITHUB_SHA" "gcr.io/$PROJECT_ID/$service_name:latest"
          docker push "gcr.io/$PROJECT_ID/$service_name:latest"
        done
    
    # Setup and authenticate kubectl
    - name: Set up kubectl
      id: get_credentials
      continue-on-error: true
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    # Alternative kubectl setup (fallback)
    - name: Manual kubectl setup (fallback)
      if: steps.get_credentials.outcome == 'failure'
      run: |
        echo "The automated get-gke-credentials action failed. Trying manual setup..."
        
        # Ensure gcloud is configured with the correct project
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        
        # Get credentials for the cluster manually
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --zone ${{ env.GKE_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }}
          
        # Verify kubectl is working
        kubectl config current-context
        echo "Manual kubectl setup completed"
    
    # Deploy to GKE
    - name: Deploy to GKE
      run: |
        echo "Deploying to GKE..."
        
        # Check kubectl connection
        echo "Verifying kubectl connection..."
        kubectl cluster-info || {
          echo "Error: kubectl is not properly configured. Retrying with explicit credentials..."
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
          kubectl cluster-info
        }
        
        # Create K8s namespace if it doesn't exist
        echo "Creating/verifying namespace mach33..."
        kubectl create namespace mach33 --dry-run=client -o yaml | kubectl apply -f -
        
        # Create ConfigMap for environment variables
        echo "Creating ConfigMap for environment variables..."
        kubectl create configmap mach33-config \
          --namespace=mach33 \
          --from-literal=SPRING_PROFILES_ACTIVE=prod \
          --from-literal=MONGODB_URI=${{ secrets.MONGODB_URI }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # List kubernetes directory contents for diagnostics
        echo "Checking Kubernetes manifests directory..."
        find Mach33-Microservices-Platform/kubernetes -type f -name "*.yml" -o -name "*.yaml" | sort
        
        # Apply K8s manifests
        echo "Applying Kubernetes manifests..."
        if [ -d "Mach33-Microservices-Platform/kubernetes" ]; then
          kubectl apply -f Mach33-Microservices-Platform/kubernetes/ || {
            echo "Warning: Error applying all manifests at once. Trying one by one..."
            for manifest in $(find Mach33-Microservices-Platform/kubernetes -type f -name "*.yml" -o -name "*.yaml"); do
              echo "Applying $manifest..."
              kubectl apply -f $manifest || echo "Warning: Failed to apply $manifest"
            done
          }
        else
          echo "Error: Kubernetes manifests directory not found at expected location"
          find . -path "*/kubernetes/*.yml" -o -path "*/kubernetes/*.yaml" | grep -v node_modules
          exit 1
        fi
        
        # Set the new image for each deployment
        echo "Updating deployments with new images..."
        for service in service-discovery api-gateway port-manager url-validation nlp-service catalog-processor llm-connection google-search; do
          echo "Updating deployment for $service..."
          kubectl set image deployment/$service $service=gcr.io/$PROJECT_ID/$service:$GITHUB_SHA -n mach33 || echo "Warning: Failed to update image for $service"
        done
        
        # Wait for rollout completion
        echo "Waiting for rollouts to complete..."
        for service in service-discovery api-gateway port-manager url-validation nlp-service catalog-processor llm-connection google-search; do
          echo "Checking rollout status for $service..."
          kubectl rollout status deployment/$service -n mach33 --timeout=180s || echo "Warning: Rollout for $service not completed in time"
        done
        
        echo "Deployment to GKE completed"

    # Verify Deployment
    - name: Verify Deployment
      run: |
        # Get public IP of the service
        echo "Attempting to get API Gateway IP..."
        GW_IP=$(kubectl get services api-gateway -n mach33 -o jsonpath="{.status.loadBalancer.ingress[0].ip}" || echo "")
        
        # Check health endpoints
        if [ -n "$GW_IP" ]; then
          echo "API Gateway available at http://$GW_IP"
          
          # Give services time to stabilize
          echo "Waiting for services to stabilize (30 seconds)..."
          sleep 30
          
          # Verify gateway health
          echo "Checking API Gateway health..."
          curl -s http://$GW_IP/actuator/health || echo "Gateway health check failed, but continuing"
        else
          echo "API Gateway IP address not available yet, skipping health check"
        fi
        
        # Show deployment status regardless of health check
        echo "Showing deployment status..."
        kubectl get deployments -n mach33 || echo "Failed to get deployments, but continuing"
        kubectl get pods -n mach33 || echo "Failed to get pods, but continuing"
        kubectl get services -n mach33 || echo "Failed to get services, but continuing"
        
        echo "Verification completed (some resources may still be initializing)"

    - name: Deployment Summary
      run: |
        echo "âœ… Mach33 Microservices Platform deployed to Google Cloud Platform"
        echo "Using MongoDB Atlas for data persistence"
        echo "Services are running on GKE" 