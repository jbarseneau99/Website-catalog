name: Deploy to Google Cloud Platform (Production)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: mach33-cluster
  GKE_ZONE: us-central1-a

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SPRING_PROFILES_ACTIVE: prod
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: false  # Explicitly disable submodule checkout
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: |
        # Check if Maven is installed
        if ! command -v mvn &> /dev/null; then
            echo "Maven not found, installing..."
            sudo apt-get update
            sudo apt-get install -y maven
        fi
        
        # Check if build script exists
        if [ ! -f "./Mach33-Microservices-Platform/scripts/build-all.sh" ]; then
            echo "Build script not found at expected location"
            find . -name "build-all.sh" | grep -v "node_modules"
            echo "Using fallback build method"
            
            # Set environment variables for production
            export SPRING_PROFILES_ACTIVE=prod
            export MONGODB_URI=$MONGODB_URI
            
            # Run Maven build directly
            echo "Running Maven build directly..."
            mvn clean package -DskipTests
            exit 0
        fi
        
        # Make script executable
        chmod +x ./Mach33-Microservices-Platform/scripts/build-all.sh
        
        # Run the build script
        if ! ./Mach33-Microservices-Platform/scripts/build-all.sh production; then
            echo "Build script failed, using fallback build method"
            # Set environment variables for production
            export SPRING_PROFILES_ACTIVE=prod
            export MONGODB_URI=$MONGODB_URI
            
            # Run Maven build directly
            echo "Running Maven build directly..."
            mvn clean package -DskipTests
        fi
    
    # Setup gcloud CLI
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    
    # Configure Docker to use Google Cloud
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io
    
    # Build and push Docker images to Google Container Registry
    - name: Build and push Docker images
      run: |
        # Loop through each service and build/push images
        for service in infrastructure/service-discovery infrastructure/api-gateway services/port-manager services/url-validation services/nlp-service services/catalog-processor services/llm-connection services/google-search; do
          service_name=$(basename $service)
          echo "Building and pushing $service_name..."
          
          # Check if service directory exists
          if [ ! -d "./Mach33-Microservices-Platform/$service" ]; then
            echo "Warning: Service directory ./Mach33-Microservices-Platform/$service not found, skipping"
            continue
          fi
          
          # Build the image
          docker build -t "gcr.io/$PROJECT_ID/$service_name:$GITHUB_SHA" ./Mach33-Microservices-Platform/$service
          
          # Push the image
          docker push "gcr.io/$PROJECT_ID/$service_name:$GITHUB_SHA"
          
          # Tag as latest
          docker tag "gcr.io/$PROJECT_ID/$service_name:$GITHUB_SHA" "gcr.io/$PROJECT_ID/$service_name:latest"
          docker push "gcr.io/$PROJECT_ID/$service_name:latest"
        done
    
    # Setup and authenticate kubectl
    - name: Set up kubectl
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GCP_SA_KEY }}
    
    # Deploy to GKE
    - name: Deploy to GKE
      run: |
        # Create K8s namespace if it doesn't exist
        kubectl create namespace mach33 --dry-run=client -o yaml | kubectl apply -f -
        
        # Create ConfigMap for environment variables
        kubectl create configmap mach33-config \
          --namespace=mach33 \
          --from-literal=SPRING_PROFILES_ACTIVE=prod \
          --from-literal=MONGODB_URI=${{ secrets.MONGODB_URI }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
        # Apply K8s manifests
        kubectl apply -f Mach33-Microservices-Platform/kubernetes/
        
        # Set the new image for each deployment
        for service in service-discovery api-gateway port-manager url-validation nlp-service catalog-processor llm-connection google-search; do
          kubectl set image deployment/$service $service=gcr.io/$PROJECT_ID/$service:$GITHUB_SHA -n mach33
        done
        
        # Wait for rollout completion
        for service in service-discovery api-gateway port-manager url-validation nlp-service catalog-processor llm-connection google-search; do
          kubectl rollout status deployment/$service -n mach33 --timeout=180s
        done

    - name: Verify Deployment
      run: |
        # Get public IP of the service
        GW_IP=$(kubectl get services api-gateway -n mach33 -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        
        # Check health endpoints
        if [ -n "$GW_IP" ]; then
          echo "API Gateway available at http://$GW_IP"
          
          # Give services time to stabilize
          sleep 30
          
          # Verify gateway health
          curl -s http://$GW_IP/actuator/health || echo "Gateway health check failed"
        else
          echo "API Gateway IP address not available yet"
        fi
        
        # Show deployment status
        kubectl get deployments -n mach33
        kubectl get pods -n mach33
        kubectl get services -n mach33
        
    - name: Deployment Summary
      run: |
        echo "âœ… Mach33 Microservices Platform deployed to Google Cloud Platform"
        echo "Using MongoDB Atlas for data persistence"
        echo "Services are running on GKE" 