name: Deploy Mach33 Microservices Platform (Production)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SPRING_PROFILES_ACTIVE: prod
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: false
      
    - name: Verify secrets
      run: |
        if [ -z "$MONGODB_URI" ]; then
          echo "::error::MONGODB_URI secret is not set. Please add it in GitHub repository secrets."
          exit 1
        fi
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: |
        # Check if Maven is installed
        if ! command -v mvn &> /dev/null; then
          echo "Maven not found, installing..."
          sudo apt-get update
          sudo apt-get install -y maven
        fi
        
        # Print working directory and list files
        echo "Current directory: $(pwd)"
        ls -la
        
        # Create a simple pom.xml file
        echo "Creating root pom.xml..."
        echo '<?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.mach33</groupId>
          <artifactId>website-catalog-parent</artifactId>
          <version>1.0.0</version>
          <packaging>pom</packaging>
          <name>Website Catalog Parent</name>
          <description>Parent POM for Website Catalog Application</description>
        </project>' > pom.xml
        
        # Set environment variables for production
        export SPRING_PROFILES_ACTIVE=prod
        export MONGODB_URI=$MONGODB_URI
        
        # Build each service individually
        cd Mach33-Microservices-Platform
        
        # Build common service parent
        echo "Building common service parent..."
        cd common/service-parent && mvn clean install -DskipTests && cd ../..
        
        # Build infrastructure services
        echo "Building infrastructure services..."
        cd infrastructure/service-discovery && mvn clean package -DskipTests && cd ../..
        cd infrastructure/api-gateway && mvn clean package -DskipTests && cd ../..
        
        # Build microservices
        echo "Building microservices..."
        for service in services/port-manager services/url-validation services/nlp-service services/catalog-processor services/llm-connection services/google-search; do
          if [ -d "$service" ]; then
            echo "Building $service..."
            cd $service && mvn clean package -DskipTests && cd $(echo $service | sed 's/[^\/]*$//' | sed 's/[^\/]*\//..\//g')
          else
            echo "Warning: $service not found, skipping"
          fi
        done
        
        echo "✅ Maven build completed"
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push Docker images
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Tag images with repository name
        export REPO_NAME=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
        
        echo "Repository name: $REPO_NAME"
        echo "Building and pushing images..."
        
        # Define all services to build
        SERVICES=(
          "infrastructure/service-discovery"
          "infrastructure/api-gateway"
          "services/port-manager"
          "services/url-validation"
          "services/nlp-service"
          "services/catalog-processor"
          "services/llm-connection"
          "services/google-search"
        )
        
        # Loop through each service
        for service in "${SERVICES[@]}"; do
          service_name=$(basename $service)
          echo "Building and pushing $service_name..."
          
          # Check if service directory exists
          if [ ! -d "./Mach33-Microservices-Platform/$service" ]; then
            echo "Warning: Service directory ./Mach33-Microservices-Platform/$service not found, skipping"
            continue
          fi
          
          # Build the image with GitHub repository tag
          docker build -t "ghcr.io/$REPO_NAME/$service_name:latest" ./Mach33-Microservices-Platform/$service
          
          # Push the image
          docker push "ghcr.io/$REPO_NAME/$service_name:latest"
        done
        
    - name: Update docker-compose.yml for production
      run: |
        # Navigate to project directory
        cd Mach33-Microservices-Platform
        
        # Update image names in docker-compose.yml to use GHCR
        export REPO_NAME=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
        
        # Create temporary file
        cat docker-compose.yml > docker-compose.temp
        
        # Update each service to use pre-built image from GHCR
        for service in service-discovery api-gateway port-manager url-validation nlp-service catalog-processor llm-connection google-search; do
          # Replace build section with image from GHCR
          sed -i "s|build:.*\n.*context:.*$service.*\n.*dockerfile:.*|image: ghcr.io/$REPO_NAME/$service:latest|g" docker-compose.temp
        done
        
        # Replace original file
        mv docker-compose.temp docker-compose.yml
        
        # Show the updated docker-compose.yml
        cat docker-compose.yml
        
    - name: Deploy to Production Environment
      run: |
        # Navigate to project directory
        cd Mach33-Microservices-Platform
        
        # Create .env file for docker-compose
        echo "SPRING_PROFILES_ACTIVE=prod" > .env
        echo "MONGODB_URI=$MONGODB_URI" >> .env
        
        # Run production deployment script
        ./scripts/run-production.sh
        
    - name: Verify Deployment
      run: |
        # Navigate to project directory
        cd Mach33-Microservices-Platform
        
        # Give services time to stabilize
        sleep 30
        
        # Check if each service is responding
        echo "Checking service health..."
        curl -s http://localhost:8761/actuator/health || echo "Service discovery not responding"
        curl -s http://localhost:8080/actuator/health || echo "API Gateway not responding"
        curl -s http://localhost:8081/actuator/health || echo "Port Manager not responding"
        curl -s http://localhost:8082/actuator/health || echo "URL Validation not responding"
        curl -s http://localhost:8083/actuator/health || echo "NLP Service not responding"
        curl -s http://localhost:8084/actuator/health || echo "Catalog Processor not responding"
        curl -s http://localhost:8085/actuator/health || echo "LLM Connection not responding"
        curl -s http://localhost:8762/actuator/health || echo "Google Search not responding"
        
        # Show containers status
        docker-compose ps
        
    - name: Deployment Summary
      run: |
        echo "✅ Mach33 Microservices Platform deployed to production environment"
        echo "Using MongoDB Atlas for data persistence"
        echo "Services are running in Docker containers" 