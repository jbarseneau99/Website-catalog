# Build Rules
build:
  - command: ./build.sh
  - watch:
    # Backend Services
    - Mach33-Microservices-Platform/services/**/*.java
    - Mach33-Microservices-Platform/common/**/*.java
    - Mach33-Microservices-Platform/infrastructure/api-gateway/**/*.java
    - Mach33-Microservices-Platform/infrastructure/service-discovery/**/*.java
    # UI Changes
    - Mach33-Microservices-Platform/ui/src/**/*.{ts,tsx,js,jsx,css,scss}
    - Mach33-Microservices-Platform/ui/public/**/*
    # Configuration
    - Mach33-Microservices-Platform/config/**/*.template
    - Mach33-Microservices-Platform/**/application.{yml,properties}
    # Docker
    - Mach33-Microservices-Platform/**/Dockerfile
    - Mach33-Microservices-Platform/docker/docker-compose.yml
  - pre_build:
    - command: ./Mach33-Microservices-Platform/scripts/stop-all.sh
    - env:
      - JAVA_HOME=/opt/homebrew/Cellar/openjdk@17/17.0.15/libexec/openjdk.jdk/Contents/Home
      - PATH=$JAVA_HOME/bin:$PATH
  - post_build:
    - command: ./Mach33-Microservices-Platform/scripts/start-services.sh

# Development Servers
dev:
  # UI Development
  ui:
    - command: cd Mach33-Microservices-Platform/ui && npm run dev
    - watch:
      - Mach33-Microservices-Platform/ui/src/**/*
      - Mach33-Microservices-Platform/ui/public/**/*
    - pre_command: pkill -f "node.*npm" || true
    - env:
      - NODE_ENV=development
      - PORT=3000

  # Backend Services
  services:
    - command: ./Mach33-Microservices-Platform/scripts/start-services.sh
    - watch:
      - Mach33-Microservices-Platform/services/**/*.java
      - Mach33-Microservices-Platform/common/**/*.java
      - Mach33-Microservices-Platform/infrastructure/api-gateway/**/*.java
      - Mach33-Microservices-Platform/infrastructure/service-discovery/**/*.java
    - pre_command: ./Mach33-Microservices-Platform/scripts/stop-all.sh
    - env:
      - SPRING_PROFILES_ACTIVE=development
      - MONGODB_URI=mongodb+srv://jbarseneau:Cheech99@cluster0.rd3fpku.mongodb.net/website-catalog

# Environment Configuration
environments:
  development:
    - env:
      - SPRING_PROFILES_ACTIVE=development
      - MONGODB_URI=mongodb+srv://jbarseneau:Cheech99@cluster0.rd3fpku.mongodb.net/website-catalog
  staging:
    - env:
      - SPRING_PROFILES_ACTIVE=staging
      - MONGODB_URI=mongodb+srv://jbarseneau:Cheech99@cluster0.rd3fpku.mongodb.net/website-catalog-staging
  production:
    - env:
      - SPRING_PROFILES_ACTIVE=production
      - MONGODB_URI=mongodb+srv://jbarseneau:Cheech99@cluster0.rd3fpku.mongodb.net/website-catalog-prod

# Service Configuration
services:
  eureka-server:
    - port: 8761  # Fixed port for Eureka
    - name: MACH33-EUREKA-SERVER

  api-gateway:
    - port: 8080  # Fixed port for API Gateway
    - name: MACH33-API-GATEWAY

  service-template:
    - dynamic_port: true
    - port_range: 8090-8110
    - name: MACH33-${service.name}

# Process Management
processes:
  - patterns:
    - "java -jar.*MACH33-EUREKA-SERVER"
    - "java -jar.*MACH33-API-GATEWAY"
    - "java -jar.*MACH33-.*"
    - "node.*npm"
  - cleanup:
    command: |
      pkill -f "java -jar.*MACH33-" || true
      pkill -f "node.*npm" || true
      docker-compose -f Mach33-Microservices-Platform/docker/docker-compose.yml down || true
  - startup_order:
    - eureka-server
    - api-gateway
    - services

# Database Configuration
db:
  type: mongodb-atlas
  uri: mongodb+srv://jbarseneau:Cheech99@cluster0.rd3fpku.mongodb.net
  options:
    - retryWrites=true
    - w=majority
  databases:
    development: website-catalog
    staging: website-catalog-staging
    production: website-catalog-prod

# Test Configuration
test:
  unit:
    - command: cd Mach33-Microservices-Platform && mvn test
    - watch:
      - Mach33-Microservices-Platform/services/**/test/**/*.java
      - Mach33-Microservices-Platform/common/**/test/**/*.java
      - Mach33-Microservices-Platform/ui/src/**/*.test.{ts,tsx,js,jsx}
  
  integration:
    - command: cd Mach33-Microservices-Platform && mvn verify -P integration-test
    - watch:
      - Mach33-Microservices-Platform/services/**/it/**/*.java
      - Mach33-Microservices-Platform/services/**/integration/**/*.java

# Docker Rules
docker:
  - command: docker-compose -f Mach33-Microservices-Platform/docker/docker-compose.yml up --build
  - pre_command: docker-compose -f Mach33-Microservices-Platform/docker/docker-compose.yml down
  - files:
    - Mach33-Microservices-Platform/docker/docker-compose.yml
    - Mach33-Microservices-Platform/services/*/Dockerfile
    - Mach33-Microservices-Platform/infrastructure/*/Dockerfile
  - env:
    - DOCKER_BUILDKIT=1
    - COMPOSE_DOCKER_CLI_BUILD=1

# Ignore Rules
ignore:
  # Build outputs
  - **/target/
  - Mach33-Microservices-Platform/ui/build/
  - Mach33-Microservices-Platform/ui/dist/
  - **/node_modules/
  
  # IDE and OS files
  - **/.idea/
  - **/.vscode/
  - **/.DS_Store
  
  # Logs and temp files
  - **/logs/
  - **/temp/
  - **/*.log
  
  # Environment files
  - **/.env
  - **/mongodb.env
  - Mach33-Microservices-Platform/services/*/.env
  
  # Git
  - **/.git/
  - **/.gitignore
  
  # Archive
  - archive/**/*

# Never Ignore
!ignore:
  # Templates and configs
  - Mach33-Microservices-Platform/config/**/*.template
  - **/application.yml
  - **/application.properties
  - tsconfig.json
  - pom.xml
  - package.json
  
  # Documentation
  - **/*.md
  - Mach33-Microservices-Platform/docs/**/*

# Empirical Analysis Methodology

## 1. Evidence Collection Requirements

### Process Verification
Must use system commands to verify actual state:
```bash
ps aux | grep "MACH33-"  # Verify PIDs
lsof -i :8761  # Verify Eureka Server
lsof -i :8080  # Verify API Gateway
lsof -i :809   # Verify Service Ports (8090-8110)
netstat -an | grep LISTEN  # Verify listening sockets
```

### Service Health Verification
Must perform direct HTTP calls:
```bash
curl -v http://localhost:8761/actuator/health  # Eureka Server
curl -v http://localhost:8080/actuator/health  # API Gateway
curl -v http://localhost:${PORT}/actuator/health  # Services
```

## 2. Evidence Analysis Requirements

### Log Analysis (Secondary Evidence Only)
Example log format:
```
2025-05-05 22:11:50.992 DEBUG [MACH33-EUREKA-SERVER] --- [nio-8761-exec-8] : Health check passed
```
- Logs alone are NOT sufficient evidence
- Must correlate with system-level verification
- Must verify timestamps are current

### Error Analysis
Example error format:
```
Error: Unable to access jarfile Mach33-Microservices-Platform/infrastructure/service-discovery/target/service-discovery.jar
[1]  + exit 1     java -jar service-discovery.jar
```
Must verify:
- Error source (PID, timestamp)
- Error impact on system
- Error persistence/transience

## 3. Verification Requirements

### Primary Evidence (Required)
- Process existence (PIDs)
- Port bindings
- Network connectivity
- System resource usage

### Secondary Evidence (Supporting Only)
- Log entries
- Error messages

## 4. Time-Series Requirements

### Continuous Monitoring
Must verify over time:
- Process stability
- Resource usage
- Error patterns
- Service health

### Interval Verification
Example from our logs:
```
22:10:50.992 - Health check
22:11:01.137 - Eviction task
22:11:16.335 - Port monitor
22:11:20.992 - Health check
```
- Must show consistent operation
- Must verify regular patterns
- Must detect anomalies

## 5. Documentation Requirements

### Command Documentation
Must document:
```bash
# Example verification chain
ps aux | grep java  # Process check
lsof -i :8761      # Port check
curl localhost:8761/health  # Health check
```

### Evidence Chain
Must maintain:
- Verification timestamps
- Command outputs
- Error states
- System responses

## 6. No Inference Rule

### Wrong (Inference-based):
"Service is running because logs show 200 OK"

### Correct (Evidence-based):
1. Verify process exists (PID)
2. Verify port bound
3. Verify network access
4. Verify service response
5. Verify consistent behavior

## 7. Failure Analysis

### Evidence Collection
Must collect when failures occur:
- System state
- Process state
- Resource state
- Error messages

### Root Cause Analysis
Must verify:
- Failure point
- Impact scope
- Recovery state
- System stability

## 8. Reporting Requirements

### Status Reports
Must include:
- Direct evidence
- Verification methods
- Failed checks
- System state changes

### Conclusions
Must be:
- Evidence-based
- Reproducible
- Verifiable
- Time-stamped 

# CORS Standards and Guidelines
cors_standards:
  # Technology Stack Requirements
  stack:
    - type: "servlet"  # Must use Spring MVC (servlet stack)
    - forbidden: ["reactive", "WebFlux", "CorsWebFilter"]
    - framework: "Spring MVC"
  
  # Required Configuration Files
  required_files:
    - file: "WebConfig.java"
      content: |
        @Configuration
        public class WebConfig implements WebMvcConfigurer {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                    .allowedOrigins("http://localhost:3000")
                    .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                    .allowedHeaders("*")
                    .allowCredentials(true)
                    .exposedHeaders("Access-Control-Allow-Origin", "Access-Control-Allow-Credentials");
                
                registry.addMapping("/actuator/**")
                    .allowedOrigins("http://localhost:3000")
                    .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                    .allowedHeaders("*")
                    .allowCredentials(true)
                    .exposedHeaders("Access-Control-Allow-Origin", "Access-Control-Allow-Credentials");
            }
        }
    
    - file: "application.yml"
      content: |
        management:
          endpoints:
            web:
              cors:
                allowed-origins: "http://localhost:3000"
                allowed-methods: "*"
                allowed-headers: "*"
                allow-credentials: true
                exposed-headers:
                  - "Access-Control-Allow-Origin"
                  - "Access-Control-Allow-Credentials"
  
  # Validation Rules
  validation:
    required_headers:
      - "Access-Control-Allow-Origin"
      - "Access-Control-Allow-Credentials"
      - "Access-Control-Allow-Methods"
      - "Access-Control-Allow-Headers"
    forbidden_patterns:
      - "CorsWebFilter"
      - "Multiple CORS configurations in same service"
      - "Mixed reactive and servlet stacks"
    tests:
      - "Browser-based health check from UI (localhost:3000)"
      - "Direct actuator endpoint access"
      - "Credentials included in requests"
      - "Headers properly exposed"

  # Service-specific Requirements
  services:
    all:
      - use_servlet_stack: true
      - cors_config_type: "WebMvcConfigurer"
      - actuator_cors_enabled: true
    api_gateway:
      - additional_config: "globalcors in application.yml"
    eureka:
      - additional_config: "management.endpoints.web.cors"

# Microservice Architecture Rules
microservices:
  required_services:
    service-discovery:
      port: 8761
      dependencies: 
        - spring-cloud-starter-netflix-eureka-server
        - spring-boot-starter-actuator
      annotations: 
        - "@EnableEurekaServer"
      required_config:
        - eureka.client.registerWithEureka=false
        - eureka.client.fetchRegistry=false
    
    api-gateway:
      port: 8080
      dependencies:
        - spring-cloud-starter-gateway
        - spring-cloud-starter-netflix-eureka-client
        - spring-boot-starter-actuator
      annotations:
        - "@EnableEurekaClient"
      required_config:
        - spring.cloud.gateway.discovery.locator.enabled=true

  service_structure:
    required_files:
      - pom.xml
      - src/main/java/**/Application.java
      - src/main/resources/application.yml
    required_directories:
      - src/main/java
      - src/main/resources
      - src/test/java
    parent_pom:
      groupId: com.spacedataarchive
      artifactId: space-data-archive-microservices
      version: 1.0-SNAPSHOT

  port_allocations:
    fixed:
      eureka_server: 8761
      api_gateway: 8080
      port_manager: 8090
      ui: 3000
    dynamic:
      range: [8081, 8089]
      managed_by: port_manager

  cors_configuration:
    allowed_origins: 
      - http://localhost:3000
    allowed_methods: 
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    allowed_headers: "*"
    allow_credentials: true
    exposed_headers:
      - Access-Control-Allow-Origin
      - Access-Control-Allow-Credentials
    max_age: 3600

  health_check:
    required_endpoints:
      - /actuator/health
    configuration:
      show_details: always
      cors_enabled: true
    retry:
      max_attempts: 30
      interval_seconds: 2

  logging:
    development:
      level:
        root: INFO
        com.spacedataarchive: DEBUG
        org.springframework.web.cors: DEBUG
    file:
      path: logs
      pattern: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n" 